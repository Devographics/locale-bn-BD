locale: en-US
namespace: css
translations:
  ###########################################################################
  # General
  ###########################################################################

  - key: general.state_of_html.intro
    t: |
      While web developers tend to focus on JavaScript and CSS, none of what we do would be even possible without HTML acting as a foundation for all of it.

      And while it has long seemed like HTML wasn't evolving, things may be changing. New elements like `<selectmenu>` and `<breadcrumb>` are on the horizon, not to mention cool new features like popovers and declarative Shadow DOM.

      So with this survey, our goal is to fill in the gaps between the [State of JS](http://stateofjs.com/) and [State of CSS](https://stateofcss.com/) surveys, and help track the evolution of the web platform as a whole!

  - key: general.state_of_html.description
    t: The annual developer survey about the web platform

  ###########################################################################
  # Sections
  ###########################################################################

  - key: sections.forms.title
    t: Forms
  - key: sections.forms.description
    t: Form-related elements and attributes

  - key: sections.interactivity.title
    t: Interactivity
  - key: sections.interactivity.description
    t: APIs that enable richer user interactions.

  - key: sections.content.title
    t: Content
  - key: sections.content.description
    t: Embedding, multimedia, data, and other content-related features.

  - key: sections.web_components.title
    t: Web Components
  - key: sections.web_components.description
    t: Making & using web components.

  # - key: sections.external_content.title
  #   t: External Content
  # - key: sections.external_content.description
  #   t: Embedding external resources, and other multimedia APIs.

  - key: sections.accessibility.title
    t: Accessibility
  - key: sections.accessibility.description
    t: Making sites and apps accessible by all.

  - key: sections.progressive_web_apps.title
    t: Progressive Web Apps
  - key: sections.progressive_web_apps.description
    t: Authoring mobile-optimized web apps.

  - key: sections.other_features.title
    t: Other Features
  - key: sections.other_features.description
    t: Other HTML elements & browser APIs.

  - key: sections.other_tools.title
    t: Other Tools & Features
  - key: sections.other_tools.description
    t: Other tools or features you use as part of your work.

  - key: sections.usage.title
    t: Usage
  - key: sections.usage.description
    t: How you use HTML.

  ###########################################################################
  # Features
  ###########################################################################

  # forms

  - key: features.form_controls
    t: Form Controls
  - key: features.form_controls.question
    t: Which form controls have you used?

  - key: features.form_input_types
    t: Input Types
  - key: features.form_input_types.question
    t: Which input types have you used?

  - key: features.form_validation_features
    t: Form Validation
  - key: features.form_validation_features.question
    t: Which of the following form validation features have you used?

  - key: features.forms_pain_points
    t: Form Pain Points
  - key: features.forms_pain_points.question
    t: What are your pain points around HTML forms?

  # interactivity

  - key: features.dom_methods
    t: DOM Methods
  - key: features.dom_methods.question
    t: Which of the following DOM methods have you used?

  - key: features.interactivity_pain_points
    t: Interactivity Pain Points
  - key: features.interactivity_pain_points.question
    t: What are your pain points around interactivity & HTML?

  - key: features.interactivity_techniques
    t: Interactivity Methods
  - key: features.interactivity_techniques.question
    t: Which of these methods do you use to add interactivity or dynamic elements to websites?
  - key: na
    t: üö´ None
  - key: options.interactivity_techniques.css
    t: CSS (animations, toggles, etc.)
  - key: options.interactivity_techniques.js_dom_libraries
    t: JavaScript DOM libraries (jQuery, etc.)
  - key: options.interactivity_techniques.js_framework
    t: JavaScript frameworks (React, Vue, etc.)
  - key: options.interactivity_techniques.vanilla_js
    t: Plain JavaScript (no frameworks or libraries)
  - key: options.interactivity_techniques.web_components
    t: Web Components

  # content

  - key: features.machine_readable_features
    t: Machine-Readable Data
  - key: features.machine_readable_features.question
    t: Which of the following have you used to include machine-readable data in HTML?

  - key: features.multiple_languages_support
    t: Multiple-Language Support
  - key: features.multiple_languages_support.question
    t: How often do you work on projects that require supporting more than one language?
  - key: options.multiple_languages_support.never
    t: Never
  - key: options.multiple_languages_support.infrequently
    t: Infrequently (less than once a year)
  - key: options.multiple_languages_support.frequently
    t: Frequently (more than once a year)
  - key: options.multiple_languages_support.all_the_time
    t: All the time

  - key: features.i18n_features
    t: Internationalization Features
  - key: features.i18n_features.question
    t: Which of the following internationalization features have you used?

  - key: features.content_pain_points
    t: Content Pain Points
  - key: features.content_pain_points.question
    t: What are your pain points around managing content in HTML?

  # External Content

  - key: features.script_link_attributes
    t: |
      `<script>` or `<link>` Attributes
  - key: features.script_link_attributes.question
    t: |
      Which of the following `<script>` or `<link>` attributes have you used?

  - key: features.rel_attribute
    t: |
      `rel` Values
  - key: features.rel_attribute.question
    t: |
      Which values have you used for the `rel` attribute of `<link>` ?

  - key: features.external_content_pain_points
    t: External Content Pain Points
  - key: features.external_content_pain_points.question
    t: What are your biggest pain points around using external content in HTML?
  - key: features.external_content_pain_points.description
    t: |
      External content includes `<iframe>`, graphics and multimedia, etc.

  # Web Components

  - key: features.web_components_libraries
    t: Web Components Libraries
  - key: features.web_components_libraries.question
    t: Have you used any Web Components libraries?

  - key: features.web_components_features.question
    t: Other Web Component Features
  - key: features.web_components_features.question
    t: Which of the following web component features have you used?

  - key: features.using_web_components_pain_points
    t: Using Web Components Pain Points
  - key: features.using_web_components_pain_points.question
    t: What are your biggest pain points around using third-party web components?

  - key: features.making_web_components_pain_points
    t: Making Web Components Pain Points
  - key: features.making_web_components_pain_points.question
    t: What are your biggest pain points around making web components?

  # Accessibility

  - key: features.accessibility_features
    t: Accessibility Features
  - key: features.accessibility_features.question
    t: Which of these accessibility features have you used?

  - key: features.accessibility_techniques.question
    t: Accessibility Techniques
  - key: features.accessibility_techniques.question
    t: Which of these accessibility techniques have you used?

  - key: features.accessibility_screenreaders
    t: Screen readers
  - key: features.accessibility_screenreaders.question
    t: Which screen readers do you test in?

  - key: features.accessibility_tools
    t: Accessibility Tools
  - key: features.accessibility_tools.question
    t: What tools do you use for accessibility testing?

  - key: features.accessibility_pain_points
    t: Accessibility Pain Points
  - key: features.accessibility_pain_points.question
    t: What are your biggest pain points around web accessibility?

  - key: features.accessibility_disabilities
    t: User Disabilities
  - key: features.accessibility_disabilities.question
    t: What kind of user disabilities do you account for when designing websites?

  - key: options.accessibility_disabilities.hearing_impairments
    aliasFor: options.disability_status.hearing_impairments
  - key: options.accessibility_disabilities.mobility_impairments
    aliasFor: options.disability_status.mobility_impairments
  - key: options.accessibility_disabilities.learning_disabilities
    t: Learning disabilities (e.g. dyslexia, dyscalculia)
  - key: options.accessibility_disabilities.cognitive_impairments
    aliasFor: options.disability_status.cognitive_impairments
  - key: options.accessibility_disabilities.vestibular_disorders
    t: Vestibular disorders (e.g. epilepsy)
  - key: options.accessibility_disabilities.low_vision
    t: Low vision (including blindness)
  - key: options.accessibility_disabilities.atypical_vision
    t: Atypical color vision (‚Äùcolor blindness‚Äù)

  - key: features.accessibility_screenreaders
    t: Screen Readers
  - key: features.accessibility_screenreaders.question
    t: Which screen readers do you use for accessibility testing?

  - key: features.accessibility_techniques
    t: Other Accessibility Techniques
  - key: features.accessibility_strategies.question
    t: What other techniques are part of your regular accessibility strategy?

  - key: features.accessibility_techniques
    t: Other Accessibility Techniques
  - key: features.accessibility_strategies.question
    t: What other techniques are part of your regular accessibility strategy?

  - key: options.accessibility_techniques.tabindex
    t: |
      Improving focus order with `tabindex`
  - key: options.accessibility_techniques.tabindex.description
    t: |
      Roving `tabindex`, `tabindex="0"` to enable focus, etc.
  - key: options.accessibility_techniques.keyboard_navigation
    t: Intuitive keyboard navigation
  - key: options.accessibility_techniques.keyboard_navigation.description
    t: Other than tab order.
  - key: options.accessibility_techniques.aria_attributes
    t: ARIA attributes
  - key: options.accessibility_techniques.aria_attributes.description
    t: |
      `role` and `aria-*` attributes
  - key: options.accessibility_techniques.descriptive_alt_text
    t: |
      Descriptive `alt` text
  - key: options.accessibility_techniques.descriptive_alt_text.description
    t: Providing alt text that describes the purpose or content of an image.
  - key: options.accessibility_techniques.skip_to_content
    t: Skip-to-content link
  - key: options.accessibility_techniques.skip_to_content.description
    t: Letting users skip straight to the main content of a page.
  - key: options.accessibility_techniques.fieldset_and_legend
    t: |
      `<fieldset>` and `<legend>`
  - key: options.accessibility_techniques.fieldset_and_legend.description
    t: |
      Using `<fieldset>` and `<legend>`  to group related form elements.
  - key: options.accessibility_techniques.headings_hierarchy
    t: Information Hierarchy
  - key: options.accessibility_techniques.headings_hierarchy.question
    t: |
      Using headings (`<h1>` - `<h6>`) that correctly represent a page's information hierarchy.
  - key: options.accessibility_techniques.meaningful_link_text
    t: Meaningful Link Text
  - key: options.accessibility_techniques.meaningful_link_text.description
    t: Ensuring that link text makes sense out of context
  - key: options.accessibility_techniques.form_control_label
    t: Form Control Labels
  - key: options.accessibility_techniques.form_control_label.description
    t: |
      Ensuring every form control has a label (or `aria-label`, etc.).
  - key: options.accessibility_techniques.visible_focus
    t: Visible Focus Ring
  - key: options.accessibility_techniques.visible_focus.description
    t: Ensuring focus ring outline is clearly visible when needed.
  - key: options.accessibility_techniques.pointer_alternative
    t: Not Relying on Pointer Only
  - key: options.accessibility_techniques.pointer_alternative.description
    t: Ensuring pointer interactions (e.g. hover) have a keyboard alternative.
  - key: options.accessibility_techniques.good_color_contrast
    t: Sufficient Contrast
  - key: options.accessibility_techniques.good_color_contrast.description
    t: Using contrast checkers to ensure sufficient color contrast.
  - key: options.accessibility_techniques.color_alternative
    t: Not Relying on Color Only
  - key: options.accessibility_techniques.color_alternative.description
    t: Ensuring that no information is conveyed by color alone.
  - key: options.accessibility_techniques.prefers_reduced_motion
    t: |
      `prefers-reduced-motion` media query
  - key: options.accessibility_techniques.prefers_reduced_motion.description
    t: Providing alternative CSS for users who prefer reduced motion.
  - key: options.accessibility_techniques.prefers_contrast
    t: |
      `prefers-contrast` media query
  - key: options.accessibility_techniques.prefers_contrast.description
    t: Providing alternative CSS for users who prefer increased contrast.

  # PWAs

  - key: features.pwa_features
    t: PWA Features
  - key: features.pwa_features.question
    t: Have you ever used any of the following PWA technologies/APIs?

  - key: features.pwa_app_manifest_fields
    t: App Manifest Fields
  - key: features.pwa_app_manifest_fields.question
    t: |
      Which of these app manifest fields (`<link rel="manifest">`) have you used, if any?

  - key: features.progressive_web_apps_pain_points
    t: PWA Pain Points
  - key: features.progressive_web_apps_pain_points.question
    t: What are your biggest pain points around making web apps that feel native?

  # Other Tools

  - key: other_tools.site_generators
    t: Site Generators
  - key: other_tools.site_generators.question
    t: Which of these static or dynamic site generators do you regularly use?

  - key: other_tools.ai_tools
    t: AI Tools
  - key: other_tools.ai_tools.question
    t: Which of these AI tools do you regularly use?

  - key: other_tools.machine_readable_features
    aliasFor: features.machine_readable_features
  - key: other_tools.machine_readable_features.question
    aliasFor: features.machine_readable_features.question

  - key: other_tools.blast_from_the_past
    t: Blast from the Past!
  - key: other_tools.blast_from_the_past.question
    t: Have you ever used any of the following old-school elements?
  - key: other_tools.blast_from_the_past.description
    t: Blast from the past!

  # Usage

  - key: usage.html_existing_features
    t: Unusable HTML Features
  - key: usage.html_existing_features
    t: Which existing HTML features are you unable to use?
  - key: usage.html_existing_features.description
    t: Which existing HTML features (elements, attributes, attribute values, etc.) do you find yourself recreating with custom components (due to e.g. browser incompatibilities, limited styling, different functionality, etc.)?

  - key: usage.what_do_you_use_html_for
    t: HTML Usage
  - key: usage.what_do_you_use_html_for.question
    t: What do you use HTML for?
  - key: options.what_do_you_use_html_for.blogs
    aliasFor: options.what_do_you_use_css_for.blogs
  - key: options.what_do_you_use_html_for.design_systems
    aliasFor: options.what_do_you_use_css_for.design_systems
  - key: options.what_do_you_use_html_for.desktop_apps
    aliasFor: options.what_do_you_use_css_for.desktop_apps
  - key: options.what_do_you_use_html_for.emails
    aliasFor: options.what_do_you_use_css_for.emails
  - key: options.what_do_you_use_html_for.marketing_sites
    aliasFor: options.what_do_you_use_css_for.marketing_sites
  - key: options.what_do_you_use_html_for.mobile_apps
    aliasFor: options.what_do_you_use_css_for.mobile_apps
  - key: options.what_do_you_use_html_for.printed_documents
    aliasFor: options.what_do_you_use_css_for.printed_documents
  - key: options.what_do_you_use_html_for.web_apps
    aliasFor: options.what_do_you_use_css_for.web_apps

  - key: usage.tools_for_other_developers
    t: Coding for Other Developers
  - key: usage.tools_for_other_developers.question
    t: Other than yourself, how many developers use the libraries, packages, components, etc. that you create?
  - key: options.tools_for_other_developers.na
    t: üö´ None
  - key: options.tools_for_other_developers.less_than_100
    t: Less than a hundred developers.
  - key: options.tools_for_other_developers.more_than_100
    t: Hundreds of developers.
  - key: options.tools_for_other_developers.more_than_1000
    t: Thousands of developers.
  - key: options.tools_for_other_developers.more_than_1000000
    t: Millions of developers or more.

  - key: usage.html_missing_elements
    t: Missing Elements
  - key: usage.html_missing_elements.question
    t: If you could add 5 elements to HTML, which would you add?
  - key: usage.html_missing_elements.description
    t: |
      These could be things like Accordion, Alert, Calendar, Carousel, Combobox/Autocomplete, Context menu, Data Grid, Rating, Tabs, Image Zoom, Switch, Skeleton loading pattern etc.

      If you use any component technologies, the components you find yourself reusing across multiple projects could be good candidates.

  - key: options.html_missing_elements.accordion
    t: Accordion
  - key: options.html_missing_elements.alert
    t: Alert
  - key: options.html_missing_elements.calendar
    t: Calendar
  - key: options.html_missing_elements.carousel
    t: Carousel
  - key: options.html_missing_elements.combobox_autocomplete
    t: Combobox/Autocomplete
  - key: options.html_missing_elements.command_palette
    t: Command Palette
  - key: options.html_missing_elements.context_menu
    t: Context Menu/Right-Click Menu
  - key: options.html_missing_elements.datatable
    t: Datatable
  - key: options.html_missing_elements.dropdown_menu
    t: Dropdown Menu
  - key: options.html_missing_elements.progress_bar
    t: Progress Bar
  - key: options.html_missing_elements.skeleton_loading_placeholder
    t: Skeleton UI/Loading Placeholder
  - key: options.html_missing_elements.switch
    t: Switch/Toggle
  - key: options.html_missing_elements.tabs
    t: Tabs
  - key: options.html_missing_elements.toast_message
    t: Toast Message
  - key: options.html_missing_elements.tooltip
    t: Tooltip
  - key: options.html_missing_elements.offcanvas
    t: Off-Canvas Area
  - key: options.html_missing_elements.spinner
    t: Loading Spinner
  - key: options.html_missing_elements.segmented_button
    t: Segmented Button
  - key: options.html_missing_elements.scroll_area
    t: Scroll Area
  - key: options.html_missing_elements.icon
    t: Icon
  - key: options.html_missing_elements.star_rating
    t: Star Rating

  - key: usage.html_pain_points_freeform
    t: Other Pain Points
  - key: usage.html_pain_points_freeform.question
    t: Any other pain points around using HTML and related technologies?

  - key: usage.html_css_js_balance
    t: HTML/CSS vs JavaScript/TypeScript Balance
  - key: usage.html_css_js_balance.question
    t: How do you divide your time between writing HTML/CSS and JavaScript (or TypeScript) code?
  - key: options.html_css_js_balance.0
    t: 100% HTML/CSS
  - key: options.html_css_js_balance.4
    t: 50%‚Äì50%
  - key: options.html_css_js_balance.8
    t: 100% JS

  # other features

  - key: features.foo_attribute
    t: "`{id}` attribute"

  - key: features.slot_assignment
    t: Explicit slot assignment (`slot="foo"`)

  - key: features.tabindex
    t: "`tabindex` attribute"

  - key: features.respimg
    t: "`srcset` and `sizes` attributes"

  - key: features.model_element
    t: "`<model>` for AR/VR/3D content"

  - key: features.slot_def
    t: Defining slots (`<slot>` and `::slotted()`)

  - key: features.controlslist
    t: "`controlslist` attribute"

  - key: features.popover_api
    t: Popover API

  - key: features.lazy_loading
    t: Lazy loading

  - key: features.sandbox_attr
    t: "`sandbox` attribute for iframes"

  - key: features.details_element
    t: "`<details>` and `<summary>`"

  - key: features.crossorigin
    t: "`crossorigin` attribute"

  - key: features.host_css
    t: Styling component host (`:host`, `:host()`, `:host-context()`)

  - key: features.element_internals
    t: "`ElementInternals` API"

  - key: features.cors
    t: CORS

  - key: features.csp
    t: Content-Security Policy (CSP)

  - key: features.structured_data
    t: Structured data (RDFa, Microdata, Microformats)

  - key: features.extended_builtins
    t: Extended built-ins

  - key: features.html_modules
    t: HTML Modules

  - key: features.accordion
    t: Exclusive accordion

  - key: features.imperative_slot
    t: Imperative slot assignment

  - key: features.focusgroup
    t: "`focusgroup` attribute"

  - key: features.form_validation
    t: Form validation

  - key: features.aria
    t: ARIA

  - key: features.rh_preconnect
    t: "Resource Hints: preconnect (`<link rel=preconnect>`)"

  - key: features.rh_prerender
    t: "Resource Hints: prerender (`<link rel=prerender>`)"

  - key: features.rh_preload
    t: "Resource Hints: preload (`<link rel=preload>`)"

  - key: features.resource_hints
    t: Resource Hints (all)

  - key: features.rh_prefetch
    t: "Resource Hints: prefetch (`<link rel=prefetch>`)"

  - key: features.declarative_shadow
    t: Declarative Shadow DOM (`<template shadowrootmode="open">`)

  - key: features.referrerpolicy
    t: "`referrerpolicy` attribute"

  - key: features.integrity
    t: Subresource Integrity (`integrity` attribute)

  - key: features.pwa_manifest
    t: PWA manifest

  - key: features.part_attr
    t: Exposing component parts (`part` attribute)

  - key: features.part_selector
    t: Styling component parts (`::part()`)

  - key: features.svg_element
    t: Inline SVG (`<svg>`)

  - key: features.math_element
    t: Inline MathML (`<math>`)

  - key: features.scoped_element_registries
    t: Scoped Custom Element Registries

  - key: features.navigation_api
    t: Navigation API

  - key: features.custom_elements_defining
    t: Defining Custom Elements

  - key: features.decoding
    t: "`decoding` attribute"

  - key: features.custom_elements_using
    t: Using Custom Elements

  - key: features.fencedframe
    t: Fenced frames

  - key: features.credentialless
    t: Credentialess iframes

  - key: features.media_capture
    t: HTML Media Capture

  - key: features.contenteditable_plaintext
    t: "`plaintext-only` value for `contenteditable`"

  - key: features.dom_parts
    t: DOM Parts

  - key: features.fetchpriority
    t: Fetch Priority API (`fetchpriority` attribute)

  - key: features.autocomplete
    t: '`autocomplete="hint"`'

  - key: features.inert_attribute
    t: "`inert` attribute"

  - key: features.client_hints
    t: HTTP client hints

  ###########################################################################
  # Resources
  ###########################################################################

  - key: resources.first_steps_css
    t: First Steps With CSS
  - key: resources.first_steps_css.description
    t: When first starting out, which resources did you use to initially learn CSS?

  ###########################################################################
  # Survey Help
  ###########################################################################

  - key: features.features_intro_css
    t: |
      Welcome to the survey! This first part is all about figuring out
      which **features** of CSS you know about.

      By the way, if you want to tell us more about any of your choices, just click that little "comment" icon!
